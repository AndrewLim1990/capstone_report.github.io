[
["index.html", "1 Final Report: edXviz 1.1 Introduction 1.2 Executive Summary", " 1 Final Report: edXviz Interactive Visualization of Student Egagement with edX MOOCs Capstone project for the Master of Data Science program at the University of British Columbia. 1.1 Introduction Massive Open Online Courses (MOOCs) are free online courses available to anyone to enroll. The main advantage of MOOCs is that they allow for education at scale in which students are provided a free and flexible way of learning. In providing a free way for people to learn about a wide variety of topics, this allows learners to advance their careers and even their quality of life. However, a common problem amongst MOOCs is that due to the lack of face to face interactions, instructors struggle to gain an intuition as to how their students are doing in terms of the following: Levels of engagement with lectures Performance on problems Class discussion and interests Etc. As a result, this project aims to provide a solution to these issues by creating an instructor facing dashboard as discussed in the next section. 1.2 Executive Summary The edXviz project aims to improve MOOCs by creating an interactive dashboard allowing instructors to gain actionable insights into their courses. Every user of the edX learning platform has all of their actions recorded and stored as a web-log. As a result, through this project, a dashboard has been constructed in which visualizations are shown summarizing key statistics mainly surrounding levels of engagement with different course elements such as videos, problems, and discussion forums. This project was completed by a student team of Master of Data Science students at the University of British Columbia consisting of myself, Andrew Lim, as well as three other: Matthew Emery, David Laing, and Subi Zhang. "],
["project-discussion.html", "2 Project Discussion 2.1 Problem Description and Suitability 2.2 Suitability and Availability of Data 2.3 Strengths and Weaknesses of Solution 2.4 Project Strategy: What went well and poorly?", " 2 Project Discussion This section aims to describe the main problem of the project as well as the strength and weaknesses of our solution and strategy. 2.1 Problem Description and Suitability The main problem of this project was to help instructors gain actionable insights into their courses by answering key questions. This problem is very well suited as a data science challenge and the skills gained throughout the Master of Data Science program have prepared us to produce a suitable solution. Although there had already existed an edX dashboard, instructors were not using it very much as they found it either difficult to use or not very useful. However, through usability testing, it was discovered that previous iterations of edX dashboards failed to allow instructors to answer key questions about their courses for a number of reasons: Instructors were not using the dashboard because it was located on a website separate from the edX website. Instructors were often required to manually “drill down” and click a large number of times before seeing any interesting statistics about their course elements such as the number of students who got a questions correct. This caused a lot of frustration amongst instructors as they had a hard time performing simple tasks such as finding the most difficult question in their course. Instructors often had to find problematic course elements themselves. For example, in order to find their least viewed video, instructors would have to click through all of their videos before being able to identify which was the offending video Additionally, through discussions with one of the project supervisors Ido Roll, it was discovered that the key questions that instructors often had about their courses included: Who are my students? (General demographics) What is the overall structure of my course? How are students engaging with my videos? How are students performing on the problems? How are students interacting with the forums? From the insights gained from usability testing and these key questions, we were well situated to begin developing the next iteration of the edX dashboard. 2.2 Suitability and Availability of Data The main source of our data were the web-logs produced by the web traffic of learners on the edX platform stored on Google BigQuery. Almost all interactions of the learners were tracked and recorded. These interactions include events such as: When a student signs in or out When a student presses play/pause/stop/fast-forward/etc on a video When a student attempts a problem When a student posts on a discussion forum It is important to note that the list above is non-comprehensive and is only a very small subset of the different events that are being tracked. The data described above is very well suited 2.3 Strengths and Weaknesses of Solution Please click here to see the video dashboard. The implemented solution linked to above was purposed to directly address the points listed in the previous sections. Our solution first provides instructors an overview of a key question, and secondly, it highlights elements that instructors are most likely interested in. The strengths of this solution include: The instructor has a better idea of their course with regard to their key question overall The instructor no longer has to find problematic course elements themselves such as problems in which students have performed poorly on The instructor no longer has to perform a large number of clicks before being able to find certain statistics Although our dashboard addresses many of the issues that arose during usability testing, it also comes with a few drawbacks. The main disadvantage of our solution is that although the dashboard is interactive, it does not allow for much room for the instructors for self exploration. In an effort to keep our dashboard simple, we have chosen key statistics to highlight to the instructor instead of allowing them to choose. For example, our dashboard highlights segments of videos that have abnormally high or low watch rates (\\(\\frac{\\text{Raw number of views a segment has}}{\\text{Unique number of students who have started the video}}\\)) . Our dashboard does not allow for instructors to instead highlight segments with abnormally high or low raw number of views. 2.4 Project Strategy: What went well and poorly? Throughout this project, we aimed to worked as an effective team in order to produce a suitable solution. Our team strategy included many things that led to our success such as: Split up the project such that different members of the team can be working in parallel Leveraging the individual strengths of each team member Using trello to have better coordination by providing transparency into what people are currently working on Meeting almost every day to work together as a group Exposing our solution as early as possible to usability testing Creating a timeline and sticking to it Generally, this project went smoothly and it is difficult to point to any one thing that went poorly. One obstacle that was encountered is that we found ourselves having many meetings with our client which could have been reduced in number and condensed down into much shorter meetings. "],
["contribution.html", "3 Contribution 3.1 Video Dashboard 3.2 General Demographics Dashboard 3.3 Dashboard Integration", " 3 Contribution In this section I will describe my main contirbutions to this proejct. As mentioned previously, this project had been split up such that team members are able to work in parallel. As a result, I focused on the tasks: Creating the Video Dashboard Creating the General Demographics Dashboard Integrating different dashboards together using Shiny Modules The following sections describe the approach taken to tackle each of the tasks listed above. 3.1 Video Dashboard Instructors are often curious as to how students are engaging with their videos. As a result, we have created a video dashboard in which instructors can use to answer key questions about how students are using their videos. Please click here to see the video dashboard 3.1.1 Data Cleaning Pipeline The data cleaning pipeline is necessary in order to populate each course with the appropriate data needed to display the video dashboard. (#fig:vid_pipe)Video data cleaning pipeline The figure above shows the data cleaning pipeline for video data. Raw track log and video data is initially stored in Google BigQuery. It is downloaded and cleaned programatically through the populate_courses.py script. Next, the cleaned wrangled_video_heat.csv file is used to generate the video visualizations. Of the above diagram, I had specifically made the two SQL scripts (generalize_video_heat.sql/generalized_video_axis.sql) as well as the video wrangling script wrangle_video.R. 3.1.2 Visualization Reasoning and Caveats: In this section, we show the visualizations within the video dashboard as well as the question that they intend to answer for instructors. Additionally, reasonings and caveats are provided with respect to the design decisions made. 3.1.2.1 Which of my videos is watched the most? (#fig:vid_most)Videos are colored by the number of views The main purpose of the plot above is to gain the trust of the instructor. Intuitively, instructors will already know that videos that occur later in the course are going to have less students because students are more likely drop the course. This allows instructors to trust what is put in front of them by seeing something that is intuitively correct. Additionally, this plot is a good introductory to the next plot. Initially, during usability testing, when showing the heat map plot below without showing the length of video plot above, instructors felt overwhelmed and had trouble interpreting the visualization. 3.1.2.2 Which part of my videos are being watched the most? (#fig:vid_heat)Video segments are colored by the watch rate The heat map plot above shows which parts of the video are being viewed the most. The “watch rate” of each segment is calculated by the following equation: \\[\\text{Watch Rate} = (\\frac{\\text{Number of times a segment has been watched}}{\\text{Number of unique students who have started the video}})\\] In the above calculation of the watch rate, the “number of times a segment has been watched” is the raw count regardless of uniqueness of the user. This means that is a new user watches a video segment twice, the “number of times a segment has been watched” will increase by two. Technically, this was the most difficult plot to make amongst the ones I had worked with. Both the wrangling and visualization of the data went through many iterations in order for it to perform adequately once we had scaled up to use all of the data from each course as well as once we had scaled out to generalize to a variety of different courses. 3.1.2.3 Which part of my videos are students watching up until? (#fig:vid_until)Visualization showing where the average viewer watches up until The plot above was created as a request from usability testing. This shows the average maximum time that a users reach in a video. 3.1.2.4 Which video segments have abnormally high or low watch rates? (#fig:vid_lm)Visualization highlighting segments with abnormally high and low watch rates The plot above shows instructors which segments have abnormally high and low watch rates. It works by creating a linear model used to predict the watch rate of a given segment. The linear model is based on the video’s occurrence in the course as well as the segment’s position within the video. Once the predicted value has been calculated, segments with the highest and lowest residuals are highlighted. 3.1.2.5 Summary table (#fig:vid_tbl)Example of output table included in dashbaord The table above shows much of the information already displayed in the visualizations above. During usability testing, it was discovered that users often want to see the actual numbers as well as the visualizations. 3.2 General Demographics Dashboard Instructors are also interested on finding how who their students are. Particularly, instructors want to know basic demographic information such as level of education, location, and language. As a result, we have made the “General Demographics Dashboard”. Please click here to see the General Demographics Dashboard. 3.2.1 Data Cleaning Pipeline The data cleaning pipeline is necessary in order to populate each course with the appropriate data needed to display the general demographics dashboard. (#fig:gen_pipe)Visualization of general demographics data cleaning pipeline The figure above shows the data cleaning pipeline for demographics data. Raw student demographics data is initially stored in Google BigQuery. It is downloaded and cleaned programatically through the populate_courses.py script. Next, the cleaned wrangle_demographics.csv file is used to generate the video visualizations. It should be noted that the data obtained through the use of generalized_demographics.sql and rbq.py is not the entire dataset of students. Instead, only students with a known IP address are obtained. This was done because IP address is used to infer statistics such as country and language. Please see generalized_demographics.sql for details. 3.2.2 Visualization Reasoning and Caveats: In this section, we show the visualizations within the general demographics dashboard as well as the question that they intend to answer for instructors. Additionally, the reasoning that went into their design as well as the caveats that go along with those decisions are provided. 3.2.2.1 What kind of education do my students have? (#fig:gen_loe)Visualization of level of education amongst learners The plot above shows the level of education of the students. 3.2.2.2 Where are my students from? (#fig:gen_loc)Visualization of the location of learners The plot above shows the top ten countries according to the number of students enrolled. Student’s country is inferred from their IP addresses within the variable cc_by_ip. This was done because the variable countryLabel available in the person_course BigQuery table is relatively sparse compared to cc_by_ip. 3.2.2.3 What languages do my students speak? (#fig:gen_lang)Visualization of languages spoken amongst learners The plot above shows the top ten languages according to the number of students that speak it. The students’ language is inferred from their country which is in turn, inferred from their IP address. 3.2.2.4 What age are my students? (#fig:gen_age)Visualization of age amongst students The plot above shows the distribution of ages amongst the learners. It should be noted that all ages less than 5 and greater than 100 have been filtered out. This was done because their are often fake accounts that entered a year of birth such that their age would be 200 or greater. As a result, the histogram would be difficult to read. 3.3 Dashboard Integration Lastly, all of the different dashboards were required to be combined in such a way that they could all be ran on a single Shiny server. To combine the different dashboards, Shiny Modules was used such that the work that everyone did could be organized into “modules” and easily combined. "],
["acknowledgements.html", "4 Acknowledgements 4.1 Matthew Emery 4.2 David Laing 4.3 Subi Zhang", " 4 Acknowledgements This project could not be completed if not for the excellent work of my teammates. Below is a list of the tasks that each of my teammates concentrated on: 4.1 Matthew Emery The problem dashboard Back-end system Deployment 4.2 David Laing Forum discussion dashboard General look and feel of dashboard Communication 4.3 Subi Zhang Pages and links dashboard Engagement overview dashboard Presentation preparation **Please Note:* The short list below each of my teammates names does not do justice to the hard work that everyone has contributed into this project. Everyone had gone above and beyond in order for us to finish our project. Personally, I had a great time working with everyone and could not have asked for better teammates. "],
["appendices.html", "5 Appendices 5.1 Video Dashboard Functions 5.2 General Demographics Dashboard Functions", " 5 Appendices 5.1 Video Dashboard Functions 5.1.1 Wrangling Functions 5.1.1.1 wrangle_video 5.1.1.1.1 Main Documentation Generates cleaned video data as a csv within a specified course directory Description: This function will automatically read files named &#39;generalized_video_heat.csv&#39; and &#39;generalized_video_axis.csv&#39; from the specified course directory and output a csv named &#39;wrangled_video_heat.csv&#39; in the same directory Usage: wrangle_video(input_course, testing = FALSE) Arguments: input_course: String of short name of course directory Value: No value returned Examples: wrangle_video(input_course = &#39;psyc1&#39;) 5.1.1.1.2 Additional Notes: In order for this function to execute properly, there must be two files in the course directory named “generalized_video_heat.csv” and “generalized_video_axis.csv”. These files are obtained from Google BigQuery. Typically, these files are automatically obtained through the “populate_courses.py” script within the “exec” directory. input_course corresponds to the “short name” within the “.config.json” file The following are descriptions of the columns within the output csv file: video_id: Video ID hash string video_name: Name of the video username: Username of the learner min_into_video: Minute into video of the segment that the learner has watched count: Number of times the learner has watched the segment mode: Whether or not the learner is auditing or a verified student certified: Whether or not the student has been certified gender: Gender of the learner activity_level: Length of time that the student has spent on the course max_stop_position: The mode time at which video_stop events occur. The mode is used instead of the maximum because some videos have video_stop events that occur at incorrect times such as 3 days. course_order: Order in which the video appears in the course index_chapter: Index of the chapter in which the video appears in chapter: Name of the chapter Each video segment is 20 seconds in length. This can be adjusted by changing the global constant SEGMENT_SIZE in the video_wrangling.R file. In order for a segment to be counted as being “viewed”, the user would have to watch the segment for at least 1 second before carrying out another event such as video_pause, video_seek, page_close etc. This threshold of 1 second can be adjusted via the global constant MIN_DURATION in the video_wrangling.R file. The largest length of a video is set to be 1 hour. Any segments passed 1 hour will simply be ignored/truncated. This can be adjusted by changing the global constant MAX_DURATION in the video_wrangling.R file. 5.1.1.2 obtain_raw_video_data 5.1.1.2.1 Main Documentation Reads raw uncleaned .csv into a dataframe Description: Reads the raw generalized_video_heat.csv obtained through rbq.py into a dataframe. Usage: obtain_raw_video_data(input_course, testing = FALSE) Arguments: input_course: Name of course directory (ex. psyc1, spd1, marketing, etc) testing: For developer use only. Boolean used to indicate to use testing data. Value: &#39;data&#39;: Dataframe containing raw student track log information Examples: obtain_raw_video_data(input_course = &#39;psyc1&#39;) 5.1.1.3 obtain_video_axis_data 5.1.1.3.1 Main Documentation Reads video_axis.csv file Description: Reads the video_axis csv obtained through rbq.py into a dataframe. For documentation on how to use rbq.py, please see www.temporaryreferencelink.com Usage: obtain_video_axis_data(input_course, testing = FALSE) Arguments: input_course: Name of course directory (ex. psyc1, spd1, marketing, etc) testing: For developer use only. Boolean used to indicate to use testing data. Value: &#39;video_axis&#39;: Dataframe containing video course structure information Examples: obtain_video_axis_data(input_course = &#39;psyc1&#39;) 5.1.1.4 write_wrangled_video_data 5.1.1.4.1 Main Documentation Outputs cleaned data as csv Description: Writes cleaned data as a csv into the course correct directory Usage: write_wrangled_video_data(input_course, cleaned_data, testing = FALSE) Arguments: input_course: Name of course directory (ex. psyc1, spd1, marketing, etc) cleaned_data: Dataframe containing cleaned data. This cleaned data is typically obtained through testing: For developer use only. Boolean used to indicate to use testing data. &#39;make_tidy_segments()&#39; Value: No return value Examples: write_wrangled_video_data(input_course = &#39;psyc1&#39;, cleaned_data=start_end_df) 5.1.1.5 prepare_video_data 5.1.1.5.1 Main Documentation Converts columns into proper variable types and adds additional columns with video information Description: Additional columns added: - &#39;max_stop_times&#39;: proxy for video length - &#39;course_order&#39;: occurrence of video within course structure - &#39;index_chapter&#39;: occurrence of chapter within course structure - &#39;chapter_name&#39;: name of chapter Usage: prepare_video_data(video_data, video_axis) Arguments: video_axis: A dataframe containing course structure information. Contains columns course_order, index_chapter, chapter_name data: Raw input dataframe to be transformed. &#39;data&#39; is obtained through &#39;obtain_raw_video_data()&#39; Value: &#39;prepared_data&#39;: The prepared data with converted variable types and extra columns Examples: prepare_video_data(data) 5.1.1.6 get_start_end_df 5.1.1.6.1 Main Documentation Obtains start and end times for video events Description: Parses dataframe and adds columns &#39;start&#39; and &#39;end&#39; showing the start and end time that a user watched a video Usage: get_start_end_df(data) Arguments: data: Dataframe containing tracklog data of students. This is obtained typically through &#39;prepare_video_data()&#39; Value: &#39;start_end_df&#39;: Original dataframe with &#39;start&#39; and &#39;end&#39; columns Examples: get_start_end_df(data = data) 5.1.1.7 get_watched_segments 5.1.1.7.1 Main Documentation Returns original dataframe with segment columns Description: Returns original dataframe with segement columns. Segment columns are 0 if the segment is not located within the start and end values and 1 otherwise. Usage: get_watched_segments(data) Arguments: data: Dataframe containing start and end columns. This dataframe is typically obtained through &#39;get_start_end_df()&#39; Value: &#39;data&#39;: Original input dataframe with new segment columns Examples: get_watched_segments(data = start_end_df) 5.1.1.8 make_tidy_segments 5.1.1.8.1 Main Documentation Returns tidy (more useable) version of input dataframe Description: Returns a tidy, more usable, version of the input dataframe. Segment information is converted into a single column using &#39;gather()&#39; Usage: make_tidy_segments(data) Arguments: data: Dataframe containing segment information. This dataframe is typically obtained through &#39;get_watched_segments()&#39; Value: &#39;data&#39;: Tidy version of input dataframe. Examples: make_tidy_segments(data = start_end_df) 5.1.1.9 check_integrity 5.1.1.9.1 Main Documentation Checks to make sure start and end data passes sanity checks Description: Returns a boolean of whether or not start and end data makes sense. This checks for NA values, end times that are passed the maximum length of the video, and extremely long and short watch durations. The threshold for watch durations can be adjusted in the global constants: &#39;MIN_DURATION&#39; and &#39;MAX_DURATION&#39; Usage: check_integrity(start, end, max_stop_position) Arguments: start: Time into video that the user has started watching the video end: Time into the video that the user has stopped watching the video max_stop_position: Length of the video being watched Value: &#39;integrity&#39;: Boolean of whether or not the data passes integrity checks Examples: check_integrity(start, end, max_stop_position) 5.1.1.10 get_end_time 5.1.1.10.1 Main Documentation Calculates video end time for non-video events using time stamps Description: Calculates video end time for non-video events using time stamps Usage: get_end_time(start, time, time_ahead, latest_speed) Arguments: start: Time into video that the user has started watching the video time: Time stamp of when the user started watching the video time_ahead: Time stamp of next event following the play event latest_speed: The speed at which the user was watching the video Value: &#39;end&#39;: Time into video that the user has stopped watching Examples: get_end_time(start, time, time_ahead, latest_speed) 5.1.1.11 get_mode 5.1.1.11.1 Main Documentation Obtain most common value from list Description: Obtain most common value from list Usage: get_mode(x) Arguments: x: List containing integer values Value: &#39;mode&#39;: The most common value within the list Examples: get_mode(x=c(0,1,2,2,2,3)) 5.1.2 Server Functions 5.1.2.1 get_aggregated_df 5.1.2.1.1 Main Documentation Aggregates dataframe by video and segment Description: Aggregates input dataframe by video (video_id) and segment (min_into_video). Additionally, adds columns: - &#39;unique_views&#39;/&#39;`Students`&#39; (number of learners who started the video), - &#39;watch_rate&#39;/&#39;`Views per Student`&#39; (number of students who have watched the segment divided by unique_views), - &#39;avg_watch_rate&#39; (average of watch_rate per video) - &#39;high_low&#39; (&#39;High Watch Rate&#39;, &#39;Low Watch Rate, or &#39;Normal&#39;) - &#39;up_until&#39; (1 if the average learner had watched up until the particular min_into_video, 0 if they had not) Usage: get_aggregated_df(filt_segs, top_selection) Arguments: filt_segs: Dataframe containing students that have been filtered by selected demographics. Typically obtained via &#39;filter_demographics()&#39; top_selection: Value of the number of top segments to highlight. Value: &#39;aggregate_segment_df&#39;: Aggregated dataframe with additional columns Examples: get_aggregated_df(filt_segs, 25) 5.1.2.1.2 Additional Notes: This function will read the filtered data frame version of the output csv file from wrangle_video. As an example, this function can be used in the following way: tidy_segment_df &lt;- read_csv(&quot;path/to/course/wrangled_video_heat.csv&quot;) filt_segs &lt;- filter_demographics(tidy_segment_df) aggregated_df &lt;- get_aggregated_df(filt_segs, 10) The high_low segment classification is based off a linear model (using lm) using the following features: course_order: Index of the video arranged by course structure min_into_video: How far into the video the segment is The up_until variable is simply obtained by looking at the maximum time that a video_stop event had occurred. As a consequence, if many students frequently skip to the end of the video without watching anything in between, this statistic may be misinterpreted. There are plans to change this in the future as it is very doable 5.1.2.2 get_ch_markers 5.1.2.2.1 Main Documentation Obtains locations of chapter lines to be placed on visualizations Description: Obtains locations of chapter lines to be placed on visualizations Usage: get_ch_markers(filt_segs) Arguments: filt_segs: Dataframe containing students that have been filtered by selected demographics. Typically obtained via &#39;filter_demographics()&#39; Value: &#39;ch_markers&#39;: List of values of where to place chapter lines on visualizations Examples: get_ch_markers(filt_segs) 5.1.2.3 get_video_lengths 5.1.2.3.1 Main Documentation Obtains dataframe with length of videos Description: Obtains dataframe with length of videos Usage: get_video_lengths(filt_segs) Arguments: filt_segs: Dataframe containing students that have been filtered by selected demographics. Typically obtained via &#39;filter_demographics()&#39; Value: &#39;vid_lengths&#39;: Dataframe with the video lengths associated with each video ID. Examples: get_video_lengths(filt_segs) 5.1.2.4 get_summary_table 5.1.2.4.1 Main Documentation Obtains locations of chapter lines to be placed on visualizations Description: Obtains locations of chapter lines to be placed on visualizations Usage: get_ch_markers(filt_segs) Arguments: filt_segs: Dataframe containing students that have been filtered by selected demographics. Typically obtained via &#39;filter_demographics()&#39; Value: &#39;ch_markers&#39;: List of values of where to place chapter lines on visualizations Examples: get_ch_markers(filt_segs) 5.1.2.5 get_video_comparison_plot 5.1.2.5.1 Main Documentation Obtains heatmap plot comparing videos against each other Description: Obtains heatmap plot comparing videos against each other Usage: get_video_comparison_plot(filtered_segments, module, filtered_ch_markers) Arguments: filtered_segments: Dataframe of segments and corresponding watch counts filtered by demographics module: String of module (chapter) name to display filtered_ch_markers: List of values containing locations of where to put chapter markers Value: &#39;g&#39;: ggplot heatmap object Examples: get_video_comparison_plot(filtered_segments, module, filtered_ch_markers) 5.1.2.6 get_segment_comparison_plot 5.1.2.6.1 Main Documentation Obtains heatmap plot comparing segments against each other Description: Obtains heatmap plot comparing segments against each other Usage: get_segment_comparison_plot(filtered_segments, module, filtered_ch_markers) Arguments: filtered_segments: Dataframe of segments and corresponding watch counts filtered by demographics module: String of module (chapter) name to display filtered_ch_markers: List of values containing locations of where to put chapter markers Value: &#39;g&#39;: ggplot heatmap object Examples: get_segment_comparison_plot(filtered_segments, module, filtered_ch_markers) 5.1.2.7 get_top_hotspots_plot 5.1.2.7.1 Main Documentation Obtains heatmap with segments of highest watch rate highlighted Description: Obtains heatmap with segments of highest watch rate highlighted Usage: get_top_hotspots_plot(filtered_segments, module, filtered_ch_markers) Arguments: filtered_segments: Dataframe of segments and corresponding watch counts filtered by demographics module: String of module (chapter) name to display filtered_ch_markers: List of values containing locations of where to put chapter markers Value: &#39;g&#39;: ggplot heatmap object Examples: get_top_hotspots_plot(filtered_segments, module, filtered_ch_markers) 5.1.2.7.2 Additional Notes: This function is no longer used the plot was discarded after usability testing. 5.1.2.8 get_high_low_plot 5.1.2.8.1 Main Documentation Obtains heatmap plot highlighting which segments have abnormally high or low watch rates Description: Obtains heatmap plot highlighting which segments have abnormally high or low watch rates Usage: get_high_low_plot(filtered_segments, module, filtered_ch_markers) Arguments: filtered_segments: Dataframe of segments and corresponding watch counts filtered by demographics module: String of module (chapter) name to display filtered_ch_markers: List of values containing locations of where to put chapter markers Value: &#39;g&#39;: ggplot heatmap object Examples: get_high_low_plot(filtered_segments, module, filtered_ch_markers) 5.1.2.8.2 Additional Notes: This function returns a plot where segments with abnormally high and low watch rates are highlighted. “High” and “low” watch rates are determined by the residuals from a linear model obtained via lm Please see source code and documentation for get_aggregated_df for more details. 5.1.2.9 get_up_until_plot 5.1.2.9.1 Main Documentation Obtains heatmap plot highlighting which segment has been watched up until on average Description: Obtains heatmap plot highlighting which segment has been watched up until on average Usage: get_up_until_plot(filtered_segments, module, filtered_ch_markers) Arguments: filtered_segments: Dataframe of segments and corresponding watch counts filtered by demographics module: String of module (chapter) name to display filtered_ch_markers: List of values containing locations of where to put chapter markers Value: &#39;g&#39;: ggplot heatmap object Examples: get_up_until_plot(filtered_segments, module, filtered_ch_markers) 5.1.2.9.2 Additional Notes: This function returns a plot in which segments are highlighted up until the average maximum stop time per student. It should be noted that this diagram may be misleading. Please see documentation for get_aggregated_df for more details. 5.1.2.10 get_rank 5.1.2.10.1 Main Documentation Returns the ranking of a vector x Description: Returns the ranking of a vector x Usage: get_rank(x) Arguments: x: A vector of numeric values Value: &#39;g&#39;: The ranking of the values within x Examples: get_rank(c(10, 20, 20, 22, 5)) 5.1.2.10.2 Additional Notes: This function returns a data frame in which the the duration watched per minute video is calculated. This is calculated by (average time spent on video (minutes) by all learners who have started the video)/(length of video (minutes)) It should be noted that the average time spent on video is calculated via the count in which the segment has been watched multiplied by the segment length. As a result, if users are consistently only watching 3 seconds of a 20 second segment, this number may be artificially inflated. This is because if a student watches more than 1 second of a segment, it will count as a “view”/“count” of the segment. This 1 second threshold can be adjusted via adjusting the global constant MIN_DURATION found in the video_wrangling.R file. 5.2 General Demographics Dashboard Functions 5.2.1 Wrangling Functions 5.2.1.1 wrangle_general 5.2.1.1.1 Main Documentation Wrangles raw general demographics data Description: Reads the input course&#39;s raw &#39;generalized_demographics.csv&#39; and outputs a cleaned version as wrangled_demographics.csv within the same directory Usage: wrangle_general(input_course) Arguments: input_course: String value of input course short name Value: No value is returned Examples: wrangle_general(&#39;psyc1&#39;) 5.2.1.2 obtain_raw_general_data 5.2.1.2.1 Main Documentation Obtains raw general demographic data Description: Obtains raw general demographic data Usage: obtain_raw_general_data(input_course) Arguments: input_course: String value of input course short name Value: Returns a data frame with the raw general demographic data Examples: obtain_raw_general_data(&#39;psyc1&#39;) 5.2.1.3 obtain_language_info 5.2.1.3.1 Main Documentation Obtains a data frame with language information Description: Reads in a .csv containing languages and their ISO code. Usage: obtain_language_info() Value: Returns a data frame with languages and their corresponding ISO codes Examples: obtain_language_info() 5.2.1.4 obtain_country_info 5.2.1.4.1 Main Documentation Obtains a data frame with countries and ISO codes of their associated languages Description: Obtains a data frame with countries and ISO codes of their associated languages Usage: obtain_country_info() Value: Data frame with countries and their associated ISO language codes Examples: obtain_country_info() 5.2.1.5 prepare_general_data 5.2.1.5.1 Main Documentation Cleans raw demographic data Description: Cleans raw demographic data Usage: prepare_general_data(data, language_info, country_info) Arguments: data: Data frame containing student demographic information language_info: Data frame containing languages and their associated ISO codes country_info: Data frame with countries and their associated languages as ISO codes Value: Cleaned data frame containing demographic information Examples: prepare_general_data(obtain_raw_general_data(&#39;psyc1&#39;), language_info(), country_info()) 5.2.1.6 write_general_data 5.2.1.6.1 Main Documentation Writes cleaned demographic data frame as a .csv to the specified course Description: Writes cleaned demographic data frame as a .csv to the specified course Usage: write_general_data(input_course, data) Arguments: input_course: String value of course short name data: The data frame containing cleaned demographic data Value: No value is returned Examples: write_general_data(&#39;psyc1&#39;, cleaned_demographic_data) 5.2.2 Server Functions 5.2.2.1 convert_loe 5.2.2.1.1 Main Documentation Converts level of education code to explicit string Description: Converts level of education code to explicit string Usage: convert_loe(LoE) Arguments: LoE: String value of level of education code Value: Returns explicit string value of level of education 5.2.2.2 get_loe_df 5.2.2.2.1 Main Documentation Returns aggregated level of education data frame Description: Returns aggregated level of education data frame Usage: get_loe_df(data) Arguments: data: Data frame containing explicit level of education of students Value: Data frame containing aggregated level of education 5.2.2.3 get_loe_plot 5.2.2.3.1 Main Documentation Returns plot with level of education of students Description: Returns plot with level of education of students Usage: get_loe_plot(loe_df) Arguments: loe_df: Data frame containing studentes aggregated by level of education Value: Returns a ggplot geom_bar object 5.2.2.4 get_age_df 5.2.2.4.1 Main Documentation Returns dataframe with student&#39;s ages Description: Returns dataframe with student&#39;s ages Usage: get_age_df(data) Arguments: data: Dataframe containing year of birth Value: Returns a dataframe with student&#39;s ages 5.2.2.5 get_age_plot 5.2.2.5.1 Main Documentation Returns histogram plot of student&#39;s age Description: Returns histogram plot of student&#39;s age Usage: get_age_plot(age_df) Arguments: age_df: Data frame containing age of students Value: Returns a ggplot geom_histogram object 5.2.2.6 get_top_country_df 5.2.2.6.1 Main Documentation Returns country aggregated data frame Description: Returns country aggregated data frame Usage: get_top_country_df(data, top_selection) Arguments: data: Data frame containing students&#39; country top_selection: The number of countries to include in output data frame Value: A data frame containing countries with the most number of students 5.2.2.7 get_country_plot 5.2.2.7.1 Main Documentation Returns a plot containing student country distribution Description: Returns a plot containing student country distribution Usage: get_country_plot(country_df, top_selection) Arguments: country_df: Data frame of students aggregated by country top_selection: The number of countries to include in the plot Value: Returns a ggplot geom_bar object 5.2.2.8 get_top_language_df 5.2.2.8.1 Main Documentation Returns a language aggregated data frame Description: Returns a language aggregated data frame Usage: get_top_language_df(data, top_selection) Arguments: data: Data frame containing student language information top_selection: Number of languages to include within the data frame Value: A data frame containing languages with the most number of students who speak it 5.2.2.9 get_language_plot 5.2.2.9.1 Main Documentation Returns plot of language aggregated information Description: Returns plot of language aggregated information Usage: get_language_plot(language_df, top_selection) Arguments: language_df: Data frame with aggregated language information top_selection: Number of different languages to include within the plot Value: Returns a plot languages with the most number of students who speak it "]
]
